buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}

		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies { classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT' }
}

repositories {
	maven { // the repo from which to get NEI and stuff
        name "chickenbones"
            url "http://chickenbones.net/maven/"
    }
}

apply plugin: 'forge'

version = mod_version
group= mod_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_name

dependencies {
	compile "codechicken:CodeChickenLib:1.7.10-1.1.1.93:dev"
	compile "codechicken:ForgeMultipart:1.7.10-1.1.0.299:dev"
	
	compile "codechicken:CodeChickenCore:1.7.10-1.0.2.11:dev"
	compile "codechicken:NotEnoughItems:1.7.10-1.0.2.26:dev"
}

minecraft {
	version = "${minecraft_version}-${forge_version}"

	replace "@ModVersion@", project.version
}

jar{
	version = "${project.minecraft.version}-${project.version}"
	manifest{
		attributes 'FMLCorePlugin': 'redgear.core.asm.CoreLoadingPlugin'
		attributes 'FMLCorePluginContainsFMLMod': 'true'
	}
}

processResources
{
	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include '*.info'

		// replace version and mcversion
		expand 'version':project.version, 'minecraft_version':project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) { exclude '*.info' }
}

// Add in a source jar for people, should they desire to download such a thing
task sourceJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
	version = "${project.minecraft.version}-${project.version}"
	manifest{
		attributes 'FMLCorePlugin': 'redgear.core.asm.CoreLoadingPlugin'
		attributes 'FMLCorePluginContainsFMLMod': 'true'
	}
}

// Add in an mcp named jar, for those who wish to run in a development environment (assuming mcp naming matches)
task deobfJar(type: Jar) {
	//from sourceSets.main.allSource
	from sourceSets.main.output
	classifier = 'dev'
	version = "${project.minecraft.version}-${project.version}"
	manifest{
		attributes 'FMLCorePlugin': 'redgear.core.asm.CoreLoadingPlugin'
		attributes 'FMLCorePluginContainsFMLMod': 'true'
	}
}

// Tell the artifact system about our extra jars
artifacts { archives sourceJar, deobfJar }



apply plugin: 'maven'

install {
    repositories.mavenInstaller {
        pom.version = "${project.minecraft.version}-${project.version}"
    }
}


uploadArchives {
	dependsOn 'reobf'
	repositories {
		if (project.hasProperty("repo") && repo) {
			logger.info('Publishing to files server')
			mavenDeployer {
				//configuration = configurations.deployJars
				repository(url: project.repourl) {
					authentication(userName: project.repousername, password: project.repokey)
				}
				// This is just the pom data for the maven repo
				pom {
					groupId = project.group
					// Force the maven upload to use the <mcversion>-<version> syntax preferred at files
					version = "${project.minecraft.version}-${project.version}"
					artifactId = project.archivesBaseName
					project {
						name project.archivesBaseName
						packaging 'jar'
						description 'RedGearCore'
						url 'https://github.com/RedGear/RedGearCore'
						scm {
							url 'https://github.com/RedGear/RedGearCore'
							connection 'scm:git:git://github.com/RedGear/RedGearCore.git'
							developerConnection 'scm:git:git@github.com:RedGear/RedGearCore.git'
						}
						issueManagement {
							system 'github'
							url 'https://github.com/RedGear/RedGearCore/issues'
						}
						developers {
							developer {
								id 'lordblackhole'
								name 'LordBlackHole'
								roles { role 'developer' }
							}
						}
					}
				}
			}
		} else {
			logger.info('Publishing to local repository')
			mavenDeployer {
				pom.version = "${project.minecraft.version}-${project.version}"
				repository(url: 'file://localhost/' + project.file('repo').getAbsolutePath())
			}
		}
	}
}

tasks.reobf.dependsOn(repackMinecraft)
